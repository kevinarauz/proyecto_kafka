version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-transforma-ecuador
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9999:9999"  # JMX para monitoreo
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: logstash
    depends_on:
      - kafka
      - elasticsearch
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/config:/usr/share/logstash/pipeline
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"

  # ========================================
  # MICROSERVICIOS POR TOPIC ESPECÍFICO
  # ========================================

  # Microservicio 1: back-logstash-connect (Topic: back-logstash-connect)
  back-logstash-connect:
    build:
      context: ./back-logstash-connect
      dockerfile: Dockerfile
    container_name: back-logstash-connect
    depends_on:
      - kafka
      - elasticsearch
    ports:
      - "8082:8082"
    environment:
      # Configuración específica para topic back-logstash-connect
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_GROUP_ID: back-logstash-connect-group
      SPRING_APPLICATION_NAME: back-logstash-connect
      SPRING_ELASTICSEARCH_REST_URIS: http://elasticsearch:9200
      SERVER_PORT: 8082
      JAVA_OPTS: "-Xmx256m -Xms128m"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kafka-network

  # Microservicio 2: events-processor (Topic: Events)
  events-processor:
    build:
      context: ./events-processor
      dockerfile: Dockerfile
    container_name: events-processor
    depends_on:
      - kafka
      - elasticsearch
    ports:
      - "8083:8083"
    environment:
      # Configuración específica para topic Events
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_GROUP_ID: events-processor-group
      SPRING_APPLICATION_NAME: events-processor
      SPRING_ELASTICSEARCH_REST_URIS: http://elasticsearch:9200
      SERVER_PORT: 8083
      JAVA_OPTS: "-Xmx256m -Xms128m"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kafka-network

  # Microservicio 3: errors-handler (Topic: errors.events)
  errors-handler:
    build:
      context: ./errors-handler
      dockerfile: Dockerfile
    container_name: errors-handler
    depends_on:
      - kafka
      - elasticsearch
    ports:
      - "8084:8084"
    environment:
      # Configuración específica para topic errors.events
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_GROUP_ID: errors-handler-group
      SPRING_APPLICATION_NAME: errors-handler
      SPRING_ELASTICSEARCH_REST_URIS: http://elasticsearch:9200
      SERVER_PORT: 8084
      JAVA_OPTS: "-Xmx256m -Xms128m"
      # Configuración de alertas por email
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: alerts@claro-ecuador.com
      SPRING_MAIL_PASSWORD: ${MAIL_PASSWORD:-defaultpassword}
      ERROR_HANDLER_ALERT_CRITICAL_THRESHOLD: 10
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  elasticsearch-data: